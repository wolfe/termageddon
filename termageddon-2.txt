I am writing a new Django application.  The goal of the software is to
allow a large team (thousands) to manage a glossary of terms.  What is
dinstinctive is that the terms can have different meanings in
different (mostly technical) domains.  There will be an approval
process as well so people can propose new definitions and two
others must approve before the new words or definitions are adopted.

The first version of the project is in the directory v1.  Please refer
to it to help resolve any decisions not explicitly mentioned in this
document or ask me questions as needed.

An entry can contain multiple definitions, but those are not part of
the data model.  It's simply the case that in the WYSIWYG editor, I
might put a bulleted list of definitions.  Usually an entry will only
have one definition.

Here are some key ideas to help motivate the data model:
* A term is a word or phrase
* A term/domain pair can have at most one entry (i.e., definition)
* The entries are editable in a WYSIWYG editor
* By default, the main view allows searching for terms, and that view should be reasonably dense
* By default, you only see terms which are approved in that main view, but there are search options to search for unapproved terms
* The main view has ability to search by domain (exact) as well as by term (substring)
* Each entry has versions, and at most one version is the active one.  It's the version that was last approved by two people.  The two people can be any two users.
  - Versions have a timestamp to indicate last important action
  - A person can have at most one unapproved version of an entry
  - Clicking save saves that person's unapproved version and applies a timestamp on the save
  - Version history is by timestamp, with versions with timestamps after the current approved version as proposals
  - When an entry gets its required approvals or it is marked as official, the timestamp is also freshened
* A conversation thread is associated with each entry (whether approved or not)
* A conversation thread can also be associated with a term (for example, people might discuss proposals for new entrie
s under different domains.)
* The conversations are like comments associated with the entry or term and they should support nest and conversation resolution buttons.  Anyone can resolve a top-level comment which closes it and the comments nested under it.
* A term can be given a status of official
* There are the following roles (in addition to the Django admin):
  - A Glossary admin can assign users as domain experts for a domain
  - A Domain expert can make certain entries "official"
  - A Domain expert's approval is needed to change the version of an "official" entry.

First steps first, we'll start working on the Django admin (not any UI
yet).  Let's first set up a new Django project in this directory for
the application which we'll call Termageddon.

The WYSIWYG editor can be Quill.js
